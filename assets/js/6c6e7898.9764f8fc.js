"use strict";(self.webpackChunkreact_query_web_i18n=self.webpackChunkreact_query_web_i18n||[]).push([[2421],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),y=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=y(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),c=y(r),m=a,d=c["".concat(l,".").concat(m)]||c[m]||p[m]||o;return r?n.createElement(d,i(i({ref:t},s),{},{components:r})):n.createElement(d,i({ref:t},s))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[c]="string"==typeof e?e:a,i[1]=u;for(var y=2;y<o;y++)i[y]=r[y];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1062:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>u,toc:()=>y});var n=r(7462),a=(r(7294),r(3905));const o={id:"lukemorales-query-key-factory",title:"Query Key Factory"},i=void 0,u={unversionedId:"community/lukemorales-query-key-factory",id:"community/lukemorales-query-key-factory",title:"Query Key Factory",description:"Typesafe query key management with auto-completion features. Focus on writing and invalidating queries without the hassle of remembering how you've set up a key for a specific query!",source:"@site/vue/community/lukemorales-query-key-factory.md",sourceDirName:"community",slug:"/community/lukemorales-query-key-factory",permalink:"/react-query-web-i18n/vue/community/lukemorales-query-key-factory",draft:!1,editUrl:"https://github.com/cangSDARM/react-query-web-i18n/blob/master/vue/community/lukemorales-query-key-factory.md",tags:[],version:"current",lastUpdatedAt:1690779970,formattedLastUpdatedAt:"Jul 31, 2023",frontMatter:{id:"lukemorales-query-key-factory",title:"Query Key Factory"},sidebar:"zhCN",previous:{title:"Vue Query\u662f\u5426\u4f1a/\u53ef\u4ee5\u53d6\u4ee3Vuex, Pinia\u6216\u5176\u4ed6\u5168\u5c40\u72b6\u6001\u7ba1\u7406\u5668\uff1f",permalink:"/react-query-web-i18n/vue/guides&concepts/does-this-replace-client-state"},next:{title:"broadcastQueryClient (Experimental)",permalink:"/react-query-web-i18n/vue/plugins/broadcastQueryClient"}},l={},y=[{value:"Installation",id:"installation",level:2},{value:"Quick start",id:"quick-start",level:2},{value:"Declare everything in a single file",id:"declare-everything-in-a-single-file",level:3},{value:"Fine-grained declaration by features",id:"fine-grained-declaration-by-features",level:3}],s={toc:y},c="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Typesafe query key management with auto-completion features. Focus on writing and invalidating queries without the hassle of remembering how you've set up a key for a specific query!"),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"You can install Query Key Factory via ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@lukemorales/query-key-factory"},"NPM"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @lukemorales/query-key-factory\n# or\n$\xa0pnpm add @lukemorales/query-key-factory\n# or\n$ yarn add @lukemorales/query-key-factory\n")),(0,a.kt)("h2",{id:"quick-start"},"Quick start"),(0,a.kt)("p",null,"Start by defining the query keys for your app:"),(0,a.kt)("h3",{id:"declare-everything-in-a-single-file"},"Declare everything in a single file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createQueryKeyStore } from '@lukemorales/query-key-factory'\n\nexport const queryKeys = createQueryKeyStore({\n  users: null,\n  todos: {\n    completed: null,\n    search: (query: string, limit = 15) => [query, limit],\n    byId: (todoId: string) => ({ todoId }),\n  },\n})\n")),(0,a.kt)("h3",{id:"fine-grained-declaration-by-features"},"Fine-grained declaration by features"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createQueryKeys, mergeQueryKeys } from '@lukemorales/query-key-factory'\n\n// my-api/users.ts\nexport const usersKeys = createQueryKeys('users')\n\n// my-api/todos.ts\nexport const todosKeys = createQueryKeys('todos', {\n  completed: null,\n  search: (query: string, limit = 15) => [query, limit],\n  byId: (todoId: string) => ({ todoId }),\n})\n\n// my-api/index.ts\nexport const queryKeys = mergeQueryKeys(usersKeys, todosKeys)\n")),(0,a.kt)("p",null,"Use throughout your codebase as the single source for writing the query keys for your cache management:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { queryKeys, completeTodo, fetchSingleTodo } from '../my-api'\n\nexport function Todo({ todoId }) {\n  const queryClient = useQueryClient()\n\n  const query = useQuery(queryKeys.todos.byId(todoId), fetchSingleTodo)\n\n  const mutation = useMutation(completeTodo, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries(queryKeys.todos.completed)\n    },\n  })\n\n  return (\n    <div>\n      <h1>\n        {query.data?.title}\n      </h1>\n\n      <p>\n        {query.data?.description}\n      </p>\n\n      <button\n        onClick={() => {\n          mutation.mutate({ todoId })\n        }}\n      >\n        Complete Todo\n      </button>\n    </div>\n  )\n}\n")),(0,a.kt)("p",null,"Check the complete documentation on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lukemorales/query-key-factory"},"GitHub"),"."))}p.isMDXComponent=!0}}]);